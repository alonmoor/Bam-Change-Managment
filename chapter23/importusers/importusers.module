<?php
// $Id$

/**
 * @file
 * Example of using the batch API.
 */

/**
 * Implementation of hook_menu().
 */
function importusers_menu() {
  $items['importusers'] = array(
    'title' => 'Import users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('importusers_form'),
    'access arguments' => array('administer users'),
  ); 
  return $items;
}

/**
 * Menu callback: define form to begin user importation.
 */
function importusers_form() {
  $form['size'] = array(
    '#type' => 'select',
    '#title' => t('Import how many users per pass?'),
    '#description' => t('Choose a value and click the Begin button.'),
    '#options' => drupal_map_assoc(array(1, 5, 10, 25, 50)),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Begin'),
  );
  return $form;
}

/**
 * Handle form submission by beginning batch operation.
 */
function importusers_form_submit($form_id, &$form_state) {
  $size = $form_state['values']['size'];  
  $batch = array(
    'operations' => array(
      array('importusers_import', array($size)),
      array('importusers_optimize', array()),
      ),
    'finished' => 'importusers_finished',
    'title' => t('Importing Users'),
    'init_message' => t('The user import process is beginning.'),
    'progress_message' => t('Imported @current of @total.'),
    'error_message' => t('The importation process encountered an error.'),
  );
  batch_set($batch);
}

/**
 * Batch callback operation: Import users.
 *
 * @param $size
 *   Number of users to import in each operation.
 * @param $context
 *   Batch context containing state information.
 */
function importusers_import($size, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user_id'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT user_id) FROM {old_users}'));
  }

  // Retrieve some users from the old_users table.
  $result = db_query_range("SELECT user_id, username AS name, email AS mail, pass FROM {old_users} WHERE user_id > %d ORDER BY user_id", $context['sandbox']['current_user_id'], 0, $size);
  
  // Transform them into Drupal users.
  while ($account = db_fetch_array($result)) {
    $new_user = user_save(array(), $account);

    // Update progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_user_id'] = $account['user_id'];
    $context['message'] = t('Importing user %username', array('%username' => $new_user->name));

    // Store usernames in case the the 'finished' callback wants them.
    $context['results'][] = $new_user->name;
  }

  // Let the batch engine know how close we are to completion.
  if ($context['sandbox']['progress'] == $context['sandbox']['max']) {
    // Done!
    $context['finished'] = 1;
  }
  else {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch callback operation. Demonstrate error handling.
 */
function importusers_optimize(&$context) {
  $context['finished'] = 1;
  // Cause fatal error by calling nonexistent function.
  //go_bananas();
}

/**
 * Called when all batch operations are complete.
 */
function importusers_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('User importation complete.'));
  }
  else {
    // A fatal error occurred during batch processing.
    $error_operation = reset($operations);
    $operation = array_shift($error_operation);
    $arguments = array_shift($error_operation);
    $arguments_as_string = implode(', ', $arguments);
    watchdog('importusers', "Error when calling operation '%s'('%s')", array($operation, $arguments_as_string));
    drupal_set_message(t('An error occurred and has been recorded in the system log.'), 'error');
  }
}
